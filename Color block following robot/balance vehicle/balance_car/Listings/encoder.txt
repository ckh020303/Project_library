; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\encoder.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\encoder.d --feedback=.\Objects\Project.fed --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Start -I.\User -I.\Library -I.\System -I.\System\delay -I.\System\sys -I.\System\usart -I.\Hardware\Encoder -I.\Hardware\Motor -I.\Hardware\MPU6050 -I.\Hardware\MPU6050\eMPL -I.\Hardware\OLED -I.\Hardware\PWM -I.\Public\Bit-Band -I.\Public\SystemClock -I.\Public\SysTick-Timer -I.\Hardware\Control -IC:\Users\GCP\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__UVISION_VERSION=535 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\encoder.crf Hardware\Encoder\Encoder.c]
                          THUMB

                          AREA ||i.Encoder_TIM2_Init||, CODE, READONLY, ALIGN=2

                  Encoder_TIM2_Init PROC
;;;2      
;;;3      void Encoder_TIM2_Init(void)
000000  b500              PUSH     {lr}
;;;4      {
000002  b087              SUB      sp,sp,#0x1c
;;;5      	GPIO_InitTypeDef GPIO_InitStructure;
;;;6      	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;	
;;;7      	TIM_ICInitTypeDef TIM_ICInitStructure;
;;;8      	
;;;9      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);			//开启时钟
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;10     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;11     	
;;;12     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;			//GPIO初始化	
000014  2004              MOVS     r0,#4
000016  f88d001b          STRB     r0,[sp,#0x1b]
;;;13     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;	
00001a  2003              MOVS     r0,#3
00001c  f8ad0018          STRH     r0,[sp,#0x18]
;;;14     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000020  f88d001a          STRB     r0,[sp,#0x1a]
;;;15     	
;;;16     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000024  a906              ADD      r1,sp,#0x18
000026  481d              LDR      r0,|L1.156|
000028  f7fffffe          BL       GPIO_Init
;;;17     	
;;;18     	TIM_TimeBaseStructInit(&TIM_TimeBaseInitStructure);				//定时器初始化
00002c  a803              ADD      r0,sp,#0xc
00002e  f7fffffe          BL       TIM_TimeBaseStructInit
;;;19     	TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
000032  2000              MOVS     r0,#0
000034  f8ad0012          STRH     r0,[sp,#0x12]
;;;20     	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
000038  f8ad000e          STRH     r0,[sp,#0xe]
;;;21     	TIM_TimeBaseInitStructure.TIM_Period = 0xff;
00003c  20ff              MOVS     r0,#0xff
00003e  f8ad0010          STRH     r0,[sp,#0x10]
;;;22     	TIM_TimeBaseInitStructure.TIM_Prescaler = 0;
000042  2000              MOVS     r0,#0
000044  f8ad000c          STRH     r0,[sp,#0xc]
;;;23     	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStructure);
000048  a903              ADD      r1,sp,#0xc
00004a  f04f4080          MOV      r0,#0x40000000
00004e  f7fffffe          BL       TIM_TimeBaseInit
;;;24     	
;;;25     	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12,			//设置编码器模式
000052  2300              MOVS     r3,#0
000054  461a              MOV      r2,r3
000056  2103              MOVS     r1,#3
000058  f04f4080          MOV      r0,#0x40000000
00005c  f7fffffe          BL       TIM_EncoderInterfaceConfig
;;;26                                     TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
;;;27     								
;;;28     	TIM_ICStructInit(&TIM_ICInitStructure);							//输入捕获初始化
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       TIM_ICStructInit
;;;29     	TIM_ICInitStructure.TIM_ICFilter = 10;
000066  200a              MOVS     r0,#0xa
000068  f8ad0008          STRH     r0,[sp,#8]
;;;30     	TIM_ICInit(TIM2, &TIM_ICInitStructure);
00006c  4669              MOV      r1,sp
00006e  0740              LSLS     r0,r0,#29
000070  f7fffffe          BL       TIM_ICInit
;;;31     	
;;;32     	TIM_ClearFlag(TIM2,TIM_FLAG_Update); 							//清除标志位
000074  2101              MOVS     r1,#1
000076  0788              LSLS     r0,r1,#30
000078  f7fffffe          BL       TIM_ClearFlag
;;;33     	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);						//中断配置
00007c  2201              MOVS     r2,#1
00007e  4611              MOV      r1,r2
000080  0790              LSLS     r0,r2,#30
000082  f7fffffe          BL       TIM_ITConfig
;;;34     	
;;;35     	TIM_SetCounter(TIM2, 0);										//清除计数
000086  2100              MOVS     r1,#0
000088  f04f4080          MOV      r0,#0x40000000
00008c  f7fffffe          BL       TIM_SetCounter
;;;36     	
;;;37     	TIM_Cmd(TIM2, ENABLE);											//开启定时器
000090  2101              MOVS     r1,#1
000092  0788              LSLS     r0,r1,#30
000094  f7fffffe          BL       TIM_Cmd
;;;38     	
;;;39     }
000098  b007              ADD      sp,sp,#0x1c
00009a  bd00              POP      {pc}
;;;40     
                          ENDP

                  |L1.156|
                          DCD      0x40010800

                          AREA ||i.Encoder_TIM4_Init||, CODE, READONLY, ALIGN=2

                  Encoder_TIM4_Init PROC
;;;40     
;;;41     void Encoder_TIM4_Init(void)
000000  b500              PUSH     {lr}
;;;42     {
000002  b087              SUB      sp,sp,#0x1c
;;;43     	GPIO_InitTypeDef GPIO_InitStructure;
;;;44     	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;	
;;;45     	TIM_ICInitTypeDef TIM_ICInitStructure;
;;;46     	
;;;47     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);			//开启时钟
000004  2101              MOVS     r1,#1
000006  2008              MOVS     r0,#8
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;48     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2004              MOVS     r0,#4
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;49     	
;;;50     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;			//GPIO初始化	
000014  2004              MOVS     r0,#4
000016  f88d001b          STRB     r0,[sp,#0x1b]
;;;51     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
00001a  20c0              MOVS     r0,#0xc0
00001c  f8ad0018          STRH     r0,[sp,#0x18]
;;;52     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000020  2003              MOVS     r0,#3
000022  f88d001a          STRB     r0,[sp,#0x1a]
;;;53     	
;;;54     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000026  a906              ADD      r1,sp,#0x18
000028  481b              LDR      r0,|L2.152|
00002a  f7fffffe          BL       GPIO_Init
;;;55     	
;;;56     	TIM_TimeBaseStructInit(&TIM_TimeBaseInitStructure);				//定时器初始化
00002e  a803              ADD      r0,sp,#0xc
000030  f7fffffe          BL       TIM_TimeBaseStructInit
;;;57     	TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
000034  2000              MOVS     r0,#0
000036  f8ad0012          STRH     r0,[sp,#0x12]
;;;58     	TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
00003a  f8ad000e          STRH     r0,[sp,#0xe]
;;;59     	TIM_TimeBaseInitStructure.TIM_Period = 0xff;
00003e  20ff              MOVS     r0,#0xff
000040  f8ad0010          STRH     r0,[sp,#0x10]
;;;60     	TIM_TimeBaseInitStructure.TIM_Prescaler = 0;
000044  2000              MOVS     r0,#0
000046  f8ad000c          STRH     r0,[sp,#0xc]
;;;61     	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStructure);
00004a  a903              ADD      r1,sp,#0xc
00004c  4813              LDR      r0,|L2.156|
00004e  f7fffffe          BL       TIM_TimeBaseInit
;;;62     	
;;;63     	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12,			//设置编码器模式
000052  2300              MOVS     r3,#0
000054  461a              MOV      r2,r3
000056  2103              MOVS     r1,#3
000058  4810              LDR      r0,|L2.156|
00005a  f7fffffe          BL       TIM_EncoderInterfaceConfig
;;;64                                     TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
;;;65     								
;;;66     	TIM_ICStructInit(&TIM_ICInitStructure);							//输入捕获初始化
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       TIM_ICStructInit
;;;67     	TIM_ICInitStructure.TIM_ICFilter = 10;
000064  200a              MOVS     r0,#0xa
000066  f8ad0008          STRH     r0,[sp,#8]
;;;68     	TIM_ICInit(TIM4, &TIM_ICInitStructure);
00006a  4669              MOV      r1,sp
00006c  480b              LDR      r0,|L2.156|
00006e  f7fffffe          BL       TIM_ICInit
;;;69     	
;;;70     	TIM_ClearFlag(TIM4,TIM_FLAG_Update);							//清除标志位
000072  2101              MOVS     r1,#1
000074  4809              LDR      r0,|L2.156|
000076  f7fffffe          BL       TIM_ClearFlag
;;;71     	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);						//中断配置
00007a  2201              MOVS     r2,#1
00007c  4611              MOV      r1,r2
00007e  4807              LDR      r0,|L2.156|
000080  f7fffffe          BL       TIM_ITConfig
;;;72     	
;;;73     	TIM_SetCounter(TIM4, 0);										//清除计数
000084  2100              MOVS     r1,#0
000086  4805              LDR      r0,|L2.156|
000088  f7fffffe          BL       TIM_SetCounter
;;;74     	
;;;75     	TIM_Cmd(TIM4, ENABLE);											//开启定时器
00008c  2101              MOVS     r1,#1
00008e  4803              LDR      r0,|L2.156|
000090  f7fffffe          BL       TIM_Cmd
;;;76     	
;;;77     }
000094  b007              ADD      sp,sp,#0x1c
000096  bd00              POP      {pc}
;;;78     
                          ENDP

                  |L2.152|
                          DCD      0x40010c00
                  |L2.156|
                          DCD      0x40000800

                          AREA ||i.Read_Speed||, CODE, READONLY, ALIGN=2

                  Read_Speed PROC
;;;78     
;;;79     uint16_t Read_Speed(int TIMx)										//获取定时器计数值
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
000002  4604              MOV      r4,r0
;;;81     	uint16_t value_1 = 0;
000004  2500              MOVS     r5,#0
;;;82     	switch(TIMx)
000006  2c02              CMP      r4,#2
000008  d002              BEQ      |L3.16|
00000a  2c04              CMP      r4,#4
00000c  d114              BNE      |L3.56|
00000e  e00a              B        |L3.38|
                  |L3.16|
;;;83     	{
;;;84     		case 2:	value_1 = (short) TIM_GetCounter(TIM2); TIM_SetCounter(TIM2, 0); break;
000010  f04f4080          MOV      r0,#0x40000000
000014  f7fffffe          BL       TIM_GetCounter
000018  b285              UXTH     r5,r0
00001a  2100              MOVS     r1,#0
00001c  f04f4080          MOV      r0,#0x40000000
000020  f7fffffe          BL       TIM_SetCounter
000024  e00a              B        |L3.60|
                  |L3.38|
;;;85     		case 4:	value_1 = (short) TIM_GetCounter(TIM4); TIM_SetCounter(TIM4, 0); break;
000026  4807              LDR      r0,|L3.68|
000028  f7fffffe          BL       TIM_GetCounter
00002c  b285              UXTH     r5,r0
00002e  2100              MOVS     r1,#0
000030  4804              LDR      r0,|L3.68|
000032  f7fffffe          BL       TIM_SetCounter
000036  e001              B        |L3.60|
                  |L3.56|
;;;86     		default: value_1 = 0;
000038  2500              MOVS     r5,#0
00003a  bf00              NOP                            ;82
                  |L3.60|
00003c  bf00              NOP                            ;84
;;;87     	}
;;;88     	
;;;89     	return value_1;
00003e  4628              MOV      r0,r5
;;;90     }
000040  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      0x40000800

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM2_IRQHandler PROC
;;;92     
;;;93     void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;94     {
;;;95     	if(TIM_GetITStatus(TIM2,TIM_IT_Update) != 0)
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b118              CBZ      r0,|L4.20|
;;;96     	{
;;;97     		TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
00000c  2101              MOVS     r1,#1
00000e  0788              LSLS     r0,r1,#30
000010  f7fffffe          BL       TIM_ClearITPendingBit
                  |L4.20|
;;;98     	}
;;;99     }
000014  bd10              POP      {r4,pc}
;;;100    
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;100    
;;;101    void TIM4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;102    {
;;;103    	if(TIM_GetITStatus(TIM4,TIM_IT_Update) != 0)
000002  2101              MOVS     r1,#1
000004  4804              LDR      r0,|L5.24|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b118              CBZ      r0,|L5.20|
;;;104    	{
;;;105    		TIM_ClearITPendingBit(TIM4,TIM_IT_Update);
00000c  2101              MOVS     r1,#1
00000e  4802              LDR      r0,|L5.24|
000010  f7fffffe          BL       TIM_ClearITPendingBit
                  |L5.20|
;;;106    	}
;;;107    }
000014  bd10              POP      {r4,pc}
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40000800
